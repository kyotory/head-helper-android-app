// Generated by view binder compiler. Do not edit!
package com.example.journal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.journal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySchedulePresentationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addSchedule;

  @NonNull
  public final Button disciplines;

  @NonNull
  public final Button group;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final Button schedule;

  @NonNull
  public final Button stats;

  @NonNull
  public final TextView textView7;

  private ActivitySchedulePresentationBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button addSchedule, @NonNull Button disciplines, @NonNull Button group,
      @NonNull ConstraintLayout main, @NonNull RecyclerView recyclerView, @NonNull Button schedule,
      @NonNull Button stats, @NonNull TextView textView7) {
    this.rootView = rootView;
    this.addSchedule = addSchedule;
    this.disciplines = disciplines;
    this.group = group;
    this.main = main;
    this.recyclerView = recyclerView;
    this.schedule = schedule;
    this.stats = stats;
    this.textView7 = textView7;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySchedulePresentationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySchedulePresentationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_schedule_presentation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySchedulePresentationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addSchedule;
      Button addSchedule = ViewBindings.findChildViewById(rootView, id);
      if (addSchedule == null) {
        break missingId;
      }

      id = R.id.disciplines;
      Button disciplines = ViewBindings.findChildViewById(rootView, id);
      if (disciplines == null) {
        break missingId;
      }

      id = R.id.group;
      Button group = ViewBindings.findChildViewById(rootView, id);
      if (group == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.schedule;
      Button schedule = ViewBindings.findChildViewById(rootView, id);
      if (schedule == null) {
        break missingId;
      }

      id = R.id.stats;
      Button stats = ViewBindings.findChildViewById(rootView, id);
      if (stats == null) {
        break missingId;
      }

      id = R.id.textView7;
      TextView textView7 = ViewBindings.findChildViewById(rootView, id);
      if (textView7 == null) {
        break missingId;
      }

      return new ActivitySchedulePresentationBinding((ConstraintLayout) rootView, addSchedule,
          disciplines, group, main, recyclerView, schedule, stats, textView7);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
