// Generated by view binder compiler. Do not edit!
package com.example.journal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.journal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemScheduleBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button deleteItemSchedule;

  @NonNull
  public final TextView textViewDiscipline;

  @NonNull
  public final TextView textViewIndex;

  @NonNull
  public final TextView textViewType;

  private ItemScheduleBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button deleteItemSchedule, @NonNull TextView textViewDiscipline,
      @NonNull TextView textViewIndex, @NonNull TextView textViewType) {
    this.rootView = rootView;
    this.deleteItemSchedule = deleteItemSchedule;
    this.textViewDiscipline = textViewDiscipline;
    this.textViewIndex = textViewIndex;
    this.textViewType = textViewType;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemScheduleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemScheduleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_schedule, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemScheduleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteItemSchedule;
      Button deleteItemSchedule = ViewBindings.findChildViewById(rootView, id);
      if (deleteItemSchedule == null) {
        break missingId;
      }

      id = R.id.textViewDiscipline;
      TextView textViewDiscipline = ViewBindings.findChildViewById(rootView, id);
      if (textViewDiscipline == null) {
        break missingId;
      }

      id = R.id.textViewIndex;
      TextView textViewIndex = ViewBindings.findChildViewById(rootView, id);
      if (textViewIndex == null) {
        break missingId;
      }

      id = R.id.textViewType;
      TextView textViewType = ViewBindings.findChildViewById(rootView, id);
      if (textViewType == null) {
        break missingId;
      }

      return new ItemScheduleBinding((ConstraintLayout) rootView, deleteItemSchedule,
          textViewDiscipline, textViewIndex, textViewType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
